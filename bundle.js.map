{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://otus-js-baklikova-5-ts/./src/index.ts","webpack://otus-js-baklikova-5-ts/./src/GameView.ts","webpack://otus-js-baklikova-5-ts/./src/GameField.ts","webpack://otus-js-baklikova-5-ts/./src/Game.ts"],"sourcesContent":["import { Game } from \"./Game\";\nimport { GameField } from \"./GameField\";\nimport { GameView } from \"./GameView\";\nimport \"./styles.css\";\n\nconst el = document.getElementById(\"app\") as HTMLElement;\n\nconst gameView = new GameView(el);\nconst gameField = new GameField(5, 5);\nnew Game(gameField, gameView, 1000);\n","import { Cell } from \"./types/Cell\";\n\ntype viewState={\n  width?: number;\n  height?: number;\n  isRunning?: boolean;\n  stepDurationMs?: number\n}\n\nexport interface IGameView {\n  updateGameField: (field: Cell[][]) => void;\n  updateGameState: (state: viewState) => void;\n  onCellClick: (cb: (x: number, y: number) => void) => void;\n  onGameStateChange: (cb: (newState: boolean) => void) => void;\n  onFieldSizeChange: (cb: (width: number, height: number) => void) => void;\n  getDuration: ()=>number;\n}\n\nexport class GameView implements IGameView {\n  el: HTMLElement;\n  onCellClickCB: (x: number, y: number) => void;\n  onGameStateChangeCB: (newState: boolean) => void;\n  onFieldSizeChangeCB: (width: number, height: number) => void;\n  state: viewState = {};\n\n  constructor(element: HTMLElement) {\n    this.el = element;\n    this.el.innerHTML =\n      \"<div class='gameField'></div><div class='gameControls'></div>\";\n\n    this.onCellClickCB = (x: number, y: number) => void {};\n    this.onGameStateChangeCB = (newState: boolean) => void {};\n    this.onFieldSizeChangeCB = (width: number, height: number) => void {};\n\n    const gameControls = this.el.querySelector(\n      \".gameControls\"\n    ) as HTMLDivElement;\n    const buttonEl = document.createElement(\"button\");\n    buttonEl.innerHTML = \"Play\";\n    buttonEl.className = \"run-button run-button--stopped\";\n    buttonEl.addEventListener(\"click\", (ev) => {\n      this.onGameStateChangeCB(buttonEl.innerHTML === \"Play\");\n    });\n    gameControls.appendChild(buttonEl);\n\n    const inputW = document.createElement(\"input\");\n    inputW.type = \"number\";\n    inputW.className = \"field-size field-size--width\";\n    gameControls.appendChild(inputW);\n\n    const inputH = document.createElement(\"input\");\n    inputH.type = \"number\";\n    inputH.className = \"field-size field-size--height\";\n    gameControls.appendChild(inputH);\n\n    inputW.addEventListener(\"change\", (ev) => {\n      this.onFieldSizeChangeCB(inputW.valueAsNumber, inputH.valueAsNumber);\n    });\n    inputH.addEventListener(\"change\", (ev) => {\n      this.onFieldSizeChangeCB(inputW.valueAsNumber, inputH.valueAsNumber);\n    });\n\n    const inputR = document.createElement(\"input\");\n    inputR.type = \"range\";\n    inputR.className = \"field-range\";\n    gameControls.appendChild(inputR);\n    inputR.addEventListener(\"change\", (ev) => {\n      this.state.stepDurationMs=inputR.valueAsNumber;\n    });\n  }\n\n  updateGameField(field: Cell[][]) {\n    const gameField = this.el.querySelector(\".gameField\") as HTMLDivElement;\n    gameField.innerHTML = \"\";\n    const tableEl = document.createElement(\"table\");\n    gameField.appendChild(tableEl);\n\n    for (let row = 0; row < field.length; row++) {\n      const tr = document.createElement(\"tr\");\n      tableEl.appendChild(tr);\n      for (let col = 0; col < field[row].length; col++) {\n        const td = document.createElement(\"td\");\n        if (field[row][col] === 1) {\n          td.className = \"cell cell--alive\";\n        } else {\n          td.className = \"cell cell--dead\";\n        }\n        td.addEventListener(\"click\", (ev) => {\n          this.onCellClickCB(col, row);\n        });\n        tr.appendChild(td);\n      }\n    }\n  }\n\n  updateGameState(state: viewState) {\n    this.state = {\n      ...this.state,\n      ...state,\n    };\n    if (typeof this.state.width === \"number\" && !isNaN(this.state.width)) {\n      const inputW = this.el.querySelector(\n        \"input[type='number'].field-size.field-size--width\"\n      ) as HTMLInputElement;\n      inputW.valueAsNumber = this.state.width;\n    }\n    if (typeof this.state.height === \"number\" && !isNaN(this.state.height)) {\n      const inputH = this.el.querySelector(\n        \"input[type='number'].field-size.field-size--height\"\n      ) as HTMLInputElement;\n      inputH.valueAsNumber = this.state.height;\n    }\n    const inputR = this.el.querySelector(\n        \"input[type='range']\"\n    ) as HTMLInputElement;\n    if (typeof state.stepDurationMs === \"number\" && !isNaN(state.stepDurationMs)) {\n      inputR.max = String(state.stepDurationMs*2);\n      inputR.valueAsNumber= state.stepDurationMs;\n    }\n    const button = this.el.querySelector(\".run-button\") as HTMLButtonElement;\n    if (this.state.isRunning ?? false) {\n      button.className = \"run-button run-button--runned\";\n      button.innerHTML = \"Stop\";\n      inputR.disabled=true;\n    } else {\n      button.className = \"run-button run-button--stopped\";\n      button.innerHTML = \"Play\";\n      inputR.disabled=false;\n    }\n  }\n\n  onCellClick(cb: (x: number, y: number) => void) {\n    this.onCellClickCB = cb;\n  }\n\n  onGameStateChange(cb: (newState: boolean) => void) {\n    this.onGameStateChangeCB = cb;\n  }\n\n  onFieldSizeChange(cb: (width: number, height: number) => void) {\n    this.onFieldSizeChangeCB = cb;\n  }\n\n  getDuration(){\n    return this.state.stepDurationMs as number;\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\nexport interface IGameField {\n  getState: () => Cell[][];\n  toggleCellState: (x: number, y: number) => void;\n  nextGeneration: () => boolean;\n  setSize: (width: number, height: number) => void;\n}\n\nexport class GameField implements IGameField {\n  field: Cell[][] = [];\n  constructor(width = 0, height = 1) {\n    const field = [];\n    for (let row = 0; row < height; row++) {\n      field[row] = [] as number[];\n      for (let col = 0; col < width; col++) {\n        field[row][col] = 0;\n      }\n      this.field = field;\n    }\n  }\n\n  getAliveCellCount(x: number, y: number): number {\n    let count = 0;\n    for (let row = y - 1; row <= y + 1; row++) {\n      for (let col = x - 1; col <= x + 1; col++) {\n        if (!(col === x && row === y) && this.field[row]?.[col] === 1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  nextGeneration() {\n    let stateChange=false;\n    for (let row = 0; row < this.field.length; row++) {\n      for (let col = 0; col < this.field[row].length; col++) {\n        const ACount: number = this.getAliveCellCount(col, row);\n\n        if (ACount === 3 && this.field[row][col] === 0) {\n          if(this.field[row][col]===0) stateChange=true;\n          this.field[row][col] = 1;\n        }\n        if (ACount !== 3 && ACount !== 2 && this.field[row][col] === 1) {\n          if(this.field[row][col]===1) stateChange=true;\n          this.field[row][col] = 0;\n        }\n      }\n    }\n    return stateChange;\n  }\n\n  getState() {\n    return this.field;\n  }\n\n  toggleCellState(x: number, y: number) {\n    if (this.field[y][x] === 1) {\n      this.field[y][x] = 0;\n    } else {\n      this.field[y][x] = 1;\n    }\n  }\n\n  setSize(width: number, height: number) {\n    const newField: Cell[][] = [];\n\n    for (let row = 0; row < height; row++) {\n      newField.push([]);\n      for (let col = 0; col < width; col++) {\n        if (\n          this.field[row] !== undefined &&\n          this.field[row][col] !== undefined\n        ) {\n          newField[row][col] = this.field[row][col];\n        } else {\n          newField[row][col] = 0;\n        }\n      }\n    }\n    this.field = newField;\n  }\n}\n","import { IGameField } from \"./GameField\";\nimport { IGameView } from \"./GameView\";\n\nexport class Game {\n  timerId?: NodeJS.Timer;\n  constructor(\n    gameField: IGameField,\n    gameView: IGameView,\n    stepDurationMs: number=1000\n  ) {\n    const state = gameField.getState();\n    gameField.setSize(state[0].length, state.length);\n    gameView.updateGameField(state);\n    gameView.updateGameState({\n      isRunning: false,\n      width: state[0].length,\n      height: state.length,\n      stepDurationMs: stepDurationMs\n    });\n\n    gameView.onCellClick((x: number, y: number) => {\n      gameField.toggleCellState(x, y);\n      gameView.updateGameField(gameField.getState());\n    });\n    gameView.onGameStateChange((newState: boolean) => {\n      if (newState) {\n        gameField.nextGeneration();\n        gameView.updateGameField(gameField.getState());\n        this.timerId = setInterval(() => {\n          if(gameField.nextGeneration()) {\n            gameView.updateGameField(gameField.getState());\n          } else {\n            clearInterval(this.timerId);\n            gameView.updateGameState({ isRunning: false });\n          }\n        }, gameView.getDuration());\n      } else {\n        gameView.updateGameField(gameField.getState());\n        clearInterval(this.timerId);\n      }\n      gameView.updateGameState({ isRunning: newState });\n    });\n    gameView.onFieldSizeChange((width: number, height: number) => {\n      gameField.setSize(width, height);\n      gameView.updateGameField(gameField.getState());\n      gameView.updateGameState({ width, height });\n    });\n  }\n}\n"],"names":["el","document","getElementById","gameView","state","constructor","element","this","innerHTML","onCellClickCB","x","y","onGameStateChangeCB","newState","onFieldSizeChangeCB","width","height","gameControls","querySelector","buttonEl","createElement","className","addEventListener","ev","appendChild","inputW","type","inputH","valueAsNumber","inputR","stepDurationMs","updateGameField","field","gameField","tableEl","row","length","tr","col","td","updateGameState","isNaN","max","String","button","isRunning","disabled","onCellClick","cb","onGameStateChange","onFieldSizeChange","getDuration","getAliveCellCount","count","nextGeneration","stateChange","ACount","getState","toggleCellState","setSize","newField","push","undefined","timerId","setInterval","clearInterval"],"sourceRoot":""}