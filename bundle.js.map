{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://otus-js-baklikova-5-ts/./src/index.ts","webpack://otus-js-baklikova-5-ts/./src/GameView.ts","webpack://otus-js-baklikova-5-ts/./src/GameField.ts","webpack://otus-js-baklikova-5-ts/./src/Game.ts"],"sourcesContent":["import { Game } from \"./Game\";\nimport { GameField } from \"./GameField\";\nimport { GameView } from \"./GameView\";\nimport \"./styles.css\";\n\nconst el = document.getElementById(\"app\") as HTMLElement;\n\nconst gameView = new GameView(el);\nconst gameField = new GameField(5, 5);\nnew Game(gameField, gameView, 1000);\n","import { Cell } from \"./types/Cell\";\nimport {IGameField} from \"./GameField\";\n\nexport interface IGameView {\n  updateGameField(field: Cell[][]): void;\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n  }): void;\n  onCellClick(cb: (x: number, y: number) => void): void;\n  onGameStateChange(cb: (newState: boolean) => void): void;\n  onFieldSizeChange(cb: (width: number, height: number) => void): void;\n}\n\nexport class GameView implements IGameView {\n  el:HTMLElement;\n  onCC: (x: number, y: number) => void;\n  onGSC: (newState: boolean) => void;\n  onFSC: (width: number, height: number) => void;\n  state:{width?: number;\n    height?: number;\n    isRunning?: boolean;}={};\n  constructor(element:HTMLElement) {\n    this.el=element;\n    this.el.innerHTML=\"<div class='gameField'></div><div class='gameControls'></div>\"\n    this.onCC = (x: number, y: number) => void {};\n    this.onGSC = (newState: boolean) => void {};\n    this.onFSC = (width: number, height: number) => void {};\n    let gameControls=this.el.querySelector(\".gameControls\") as HTMLDivElement;\n    let buttonEl=document.createElement(\"button\");\n    buttonEl.innerHTML=\"Play\";\n    buttonEl.className=\"run-button run-button--stopped\";\n    buttonEl.addEventListener(\"click\",(ev) => {this.onGSC(buttonEl.innerHTML===\"Play\")});\n    gameControls.appendChild(buttonEl);\n    let inputW=document.createElement(\"input\");\n    inputW.type=\"number\";\n    inputW.className=\"field-size field-size--width\";\n    gameControls.appendChild(inputW);\n    let inputH=document.createElement(\"input\");\n    inputH.type=\"number\";\n    inputH.className=\"field-size field-size--height\";\n    gameControls.appendChild(inputH);\n    inputW.addEventListener(\"change\",(ev) => {\n      this.onFSC(inputW.valueAsNumber as number,inputH.valueAsNumber as number)});\n    inputH.addEventListener(\"change\",(ev) => {\n      this.onFSC(inputW.valueAsNumber as number,inputH.valueAsNumber as number)});\n  }\n  updateGameField(field: Cell[][]){\n    let gameField=this.el.querySelector(\".gameField\") as HTMLDivElement;\n    gameField.innerHTML='';\n    let tableEl=document.createElement(\"table\");\n    gameField.appendChild(tableEl);\n    for (let row = 0; row < field.length; row++) {\n      let tr=document.createElement(\"tr\");\n      tableEl.appendChild(tr)\n      for (let col = 0; col < field[row].length; col++) {\n         let td=document.createElement(\"td\");\n         if(field[row][col]===1){\n           td.className=\"cell cell--alive\";\n         }\n         else {\n           td.className=\"cell cell--dead\";\n         }\n        td.addEventListener(\"click\",(ev) => {this.onCC(col,row)});\n         tr.appendChild(td);\n      }\n    }\n  }\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n  }){\n    this.state = {\n      ...this.state,\n      ...state,\n    };\n    if(typeof this.state.width === \"number\"&& !isNaN(this.state.width)) {\n      let inputW=(this.el.querySelector(\n          \"input[type='number'].field-size.field-size--width\"\n      ) as HTMLInputElement)\n      inputW.valueAsNumber = this.state.width as number;\n    }\n    if(typeof this.state.height === \"number\" && !isNaN(this.state.height)) {\n      let inputH=(this.el.querySelector(\n          \"input[type='number'].field-size.field-size--height\"\n      ) as HTMLInputElement)\n      inputH.valueAsNumber = this.state.height as number;\n    }\n    let button=this.el.querySelector(\".run-button\") as HTMLButtonElement;\n    if(state.isRunning){\n      button.className=\"run-button run-button--runned\";\n      button.innerHTML=\"Stop\";\n    }else {\n      button.className=\"run-button run-button--stopped\";\n      button.innerHTML=\"Play\";\n    }\n\n  }\n  onCellClick(cb: (x: number, y: number) => void){\n    this.onCC=cb;\n  }\n  onGameStateChange(cb: (newState: boolean) => void){\n    this.onGSC=cb;\n  }\n  onFieldSizeChange(cb: (width: number, height: number) => void){\n    this.onFSC=cb;\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\nexport interface IGameField {\n  getState(): Cell[][];\n  toggleCellState(x: number, y: number): void;\n  nextGeneration(): void;\n  setSize(width: number, height: number) : void;\n}\n\nexport class GameField implements IGameField {\n  field: Cell[][]=[];\n  constructor(width: number = 0, height: number = 1) {\n    let field = [];\n    for (let row = 0; row < height; row++) {\n      field[row] = [] as number[];\n      for (let col = 0; col < width; col++) {\n        field[row][col] = 0;\n      }\n      this.field = field;\n    }\n  }\n\n   getAliveCellCount(x: number,y: number): number{\n    let count: number=0;\n    for (let row = y-1; row <= y+1; row++) {\n      for (let col = x-1; col <= x+1; col++) {\n        if(!(col===x && row===y) && this.field[row]?.[col]===1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  nextGeneration() {\n\n    for (let row = 0; row < this.field.length; row++) {\n      for (let col = 0; col < this.field[row].length; col++) {\n        let ACount: number=this.getAliveCellCount(col,row);\n\n        if(ACount===3 && this.field[row][col] === 0){\n          this.field[row][col]=1;\n        }\n        if(ACount !== 3 && ACount !== 2  && this.field[row][col] === 1) {\n            this.field[row][col]=0;\n          }\n      }\n    }\n  }\n\n  getState() {\n    return this.field;\n  }\n\n  toggleCellState(x: number, y: number) {\n    if (this.field[y][x] === 1) {\n      this.field[y][x] = 0;\n    } else {\n      this.field[y][x] = 1;\n    }\n  }\n\n  setSize(width: number, height: number) {\n    let newField : Cell[][] = [];\n\n\n    for (let row = 0; row < height; row++) {\n      newField.push([]);\n      for (let col = 0; col < width; col++) {\n        if (\n          this.field[row] !== undefined &&\n          this.field[row][col] !== undefined\n        ) {\n          newField[row][col] = this.field[row][col];\n        } else {\n          newField[row][col] = 0;\n        }\n      }\n    }\n    this.field = newField;\n  }\n}\n","import { GameField, IGameField } from \"./GameField\";\nimport { GameView, IGameView } from \"./GameView\";\nimport { Cell } from \"./types/Cell\";\n\nexport interface IGame {}\n\nexport class Game implements IGame {\n    timerId?: NodeJS.Timer;\n    constructor(gameField:IGameField, gameView:IGameView, stepDurationMs?:number){\n\n        let state=gameField.getState();\n        gameField.setSize(state[0].length, state.length);\n        gameView.updateGameField(state);\n        gameView.updateGameState({\n            isRunning: false,\n            width: state[0].length,\n            height: state.length\n        });\n\n        gameView.onCellClick((x: number, y: number)=>{\n            gameField.toggleCellState(x,y);\n            gameView.updateGameField(gameField.getState());\n        });\n        gameView.onGameStateChange((newState: boolean)=>{\n            if(newState) {\n                gameField.nextGeneration();\n                gameView.updateGameField(gameField.getState());\n                this.timerId = setInterval(()=>{\n                    gameField.nextGeneration();\n                    gameView.updateGameField(gameField.getState());\n                }, stepDurationMs);\n            } else {\n                gameView.updateGameField(gameField.getState());\n                clearInterval(this.timerId);\n            }\n            gameView.updateGameState({isRunning:newState});\n        });\n        gameView.onFieldSizeChange((width: number, height: number)=>{\n            gameField.setSize(width,height);\n            gameView.updateGameField(gameField.getState());\n            gameView.updateGameState({width: width,height: height});\n        });\n    }\n}\n"],"names":["el","document","getElementById","gameView","state","constructor","element","this","innerHTML","onCC","x","y","onGSC","newState","onFSC","width","height","gameControls","querySelector","buttonEl","createElement","className","addEventListener","ev","appendChild","inputW","type","inputH","valueAsNumber","updateGameField","field","gameField","tableEl","row","length","tr","col","td","updateGameState","isNaN","button","isRunning","onCellClick","cb","onGameStateChange","onFieldSizeChange","getAliveCellCount","count","nextGeneration","ACount","getState","toggleCellState","setSize","newField","push","undefined","stepDurationMs","timerId","setInterval","clearInterval"],"sourceRoot":""}