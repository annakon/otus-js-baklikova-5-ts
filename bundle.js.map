{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://otus-js-baklikova-5-ts/./src/GameField.ts","webpack://otus-js-baklikova-5-ts/./src/GameView.ts","webpack://otus-js-baklikova-5-ts/./src/index.ts","webpack://otus-js-baklikova-5-ts/./src/Game.ts"],"sourcesContent":["import { Cell } from \"./types/Cell\";\n\nexport interface IGameField {\n  getState: () => Cell[][];\n  toggleCellState: (x: number, y: number) => void;\n  nextGeneration: () => boolean;\n  setSize: (width: number, height: number) => void;\n}\n\nexport class GameField implements IGameField {\n  field: Cell[][] = [];\n  constructor(width = 0, height = 1) {\n    const field = [];\n    for (let row = 0; row < height; row++) {\n      field[row] = [] as number[];\n      for (let col = 0; col < width; col++) {\n        field[row][col] = 0;\n      }\n      this.field = field;\n    }\n  }\n\n  getAliveCellCount(x: number, y: number): number {\n    let count = 0;\n    for (let row = y - 1; row <= y + 1; row++) {\n      for (let col = x - 1; col <= x + 1; col++) {\n        if (!(col === x && row === y) && this.field[row]?.[col] === 1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  nextGeneration() {\n    let stateChange=false;\n    for (let row = 0; row < this.field.length; row++) {\n      for (let col = 0; col < this.field[row].length; col++) {\n        const ACount: number = this.getAliveCellCount(col, row);\n\n        if (ACount === 3 && this.field[row][col] === 0) {\n          if(this.field[row][col]===0) stateChange=true;\n          this.field[row][col] = 1;\n        }\n        if (ACount !== 3 && ACount !== 2 && this.field[row][col] === 1) {\n          if(this.field[row][col]===1) stateChange=true;\n          this.field[row][col] = 0;\n        }\n      }\n    }\n    return stateChange;\n  }\n\n  getState() {\n    return this.field;\n  }\n\n  toggleCellState(x: number, y: number) {\n    if (this.field[y][x] === 1) {\n      this.field[y][x] = 0;\n    } else {\n      this.field[y][x] = 1;\n    }\n  }\n\n  setSize(width: number, height: number) {\n    const newField: Cell[][] = [];\n\n    for (let row = 0; row < height; row++) {\n      newField.push([]);\n      for (let col = 0; col < width; col++) {\n        if (\n          this.field[row] !== undefined &&\n          this.field[row][col] !== undefined\n        ) {\n          newField[row][col] = this.field[row][col];\n        } else {\n          newField[row][col] = 0;\n        }\n      }\n    }\n    this.field = newField;\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\ntype viewState={\n  width: number;\n  height: number;\n  isRunning: boolean;\n  stepDurationMs: number\n}\n\nexport interface IGameView {\n  updateGameField: (field: Cell[][]) => void;\n  updateGameState: (state: viewState) => void;\n  onCellClick: (cb: (x: number, y: number) => void) => void;\n  onGameStateChange: (cb: (newState: boolean) => void) => void;\n  onFieldSizeChange: (cb: (width: number, height: number) => void) => void;\n  getDuration: ()=>number;\n}\n\nexport class GameView implements IGameView {\n  el: HTMLElement;\n  onCellClickCB: (x: number, y: number) => void;\n  onGameStateChangeCB: (newState: boolean) => void;\n  onFieldSizeChangeCB: (width: number, height: number) => void;\n  state: viewState;\n\n  constructor(element: HTMLElement, state: viewState) {\n    this.state=state;\n    this.el = element;\n    this.el.innerHTML =\n      \"<div class='gameField'></div><div class='gameControls'></div>\";\n\n    this.onCellClickCB = (x: number, y: number) => void {};\n    this.onGameStateChangeCB = (newState: boolean) => void {};\n    this.onFieldSizeChangeCB = (width: number, height: number) => void {};\n\n    const gameControls = this.el.querySelector(\n      \".gameControls\"\n    ) as HTMLDivElement;\n    const buttonEl = document.createElement(\"button\");\n    buttonEl.innerHTML = \"Play\";\n    buttonEl.className = \"run-button run-button--stopped\";\n    buttonEl.addEventListener(\"click\", (ev) => {\n      this.onGameStateChangeCB(buttonEl.innerHTML === \"Play\");\n    });\n    gameControls.appendChild(buttonEl);\n\n    let input: HTMLInputElement[]=[document.createElement(\"input\"),document.createElement(\"input\")];\n\n    for(let i=0;i<2;i++){\n      input[i].type = \"number\";\n      if(i===0) {\n        input[i].className = \"field-size field-size--width\";\n      } else {\n        input[i].className =  \"field-size field-size--height\";\n      }\n      gameControls.appendChild(input[i]);\n      input[i].addEventListener(\"change\", (ev) => {\n        this.onFieldSizeChangeCB(input[0].valueAsNumber, input[1].valueAsNumber);\n      });\n    }\n\n    const inputRangeSpeed = document.createElement(\"input\");\n    inputRangeSpeed.type = \"range\";\n    inputRangeSpeed.className = \"field-range\";\n    gameControls.appendChild(inputRangeSpeed);\n    inputRangeSpeed.addEventListener(\"change\", (ev) => {\n      this.state.stepDurationMs=inputRangeSpeed.valueAsNumber;\n    });\n  }\n\n  updateGameField(field: Cell[][]) {\n    const gameField = this.el.querySelector(\".gameField\") as HTMLDivElement;\n    gameField.innerHTML = \"\";\n    const tableEl = document.createElement(\"table\");\n    gameField.appendChild(tableEl);\n\n    for (let row = 0; row < field.length; row++) {\n      const tr = document.createElement(\"tr\");\n      tableEl.appendChild(tr);\n      for (let col = 0; col < field[row].length; col++) {\n        const td = document.createElement(\"td\");\n        if (field[row][col] === 1) {\n          td.className = \"cell cell--alive\";\n        } else {\n          td.className = \"cell cell--dead\";\n        }\n        td.addEventListener(\"click\", (ev) => {\n          this.onCellClickCB(col, row);\n        });\n        tr.appendChild(td);\n      }\n    }\n  }\n\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n    stepDurationMs?: number\n  }) {\n    this.state = {\n      ...this.state,\n      ...state,\n    };\n\n      const inputW = this.el.querySelector(\n        \".field-size--width\"\n      ) as HTMLInputElement;\n      inputW.valueAsNumber = this.state.width;\n\n\n      const inputH = this.el.querySelector(\n        \".field-size--height\"\n      ) as HTMLInputElement;\n      inputH.valueAsNumber = this.state.height;\n\n    const inputRangeSpeed = this.el.querySelector(\n        \"input[type='range']\"\n    ) as HTMLInputElement;\n    if (typeof state.stepDurationMs === \"number\" && !isNaN(state.stepDurationMs)) {\n      inputRangeSpeed.max = String(state.stepDurationMs*2);\n      inputRangeSpeed.valueAsNumber= state.stepDurationMs;\n    }\n    const button = this.el.querySelector(\".run-button\") as HTMLButtonElement;\n    if (this.state.isRunning ?? false) {\n      button.className = \"run-button run-button--runned\";\n      button.innerHTML = \"Stop\";\n      inputRangeSpeed.disabled=true;\n    } else {\n      button.className = \"run-button run-button--stopped\";\n      button.innerHTML = \"Play\";\n      inputRangeSpeed.disabled=false;\n    }\n  }\n\n  onCellClick(cb: (x: number, y: number) => void) {\n    this.onCellClickCB = cb;\n  }\n\n  onGameStateChange(cb: (newState: boolean) => void) {\n    this.onGameStateChangeCB = cb;\n  }\n\n  onFieldSizeChange(cb: (width: number, height: number) => void) {\n    this.onFieldSizeChangeCB = cb;\n  }\n\n  getDuration(){\n    return this.state.stepDurationMs as number;\n  }\n}\n","import { Game } from \"./Game\";\nimport \"./styles.css\";\n\nconst el = document.getElementById(\"app\") as HTMLElement;\n\nnew Game(el, 5,5, 1000);\n","import { GameField } from \"./GameField\";\nimport { GameView } from \"./GameView\";\n\nexport class Game {\n  timerId?: NodeJS.Timer;\n  constructor(\n      el: HTMLElement,width: number, height: number,\n    stepDurationMs: number=1000\n  ) {\n    const gameView = new GameView(el,{width,height,isRunning:false,stepDurationMs});\n    const gameField = new GameField(5, 5);\n    const state = gameField.getState();\n    gameField.setSize(state[0].length, state.length);\n    gameView.updateGameField(state);\n    gameView.updateGameState({\n      isRunning: false,\n      width: state[0].length,\n      height: state.length,\n      stepDurationMs: stepDurationMs\n    });\n\n    gameView.onCellClick((x: number, y: number) => {\n      gameField.toggleCellState(x, y);\n      gameView.updateGameField(gameField.getState());\n    });\n    gameView.onGameStateChange((newState: boolean) => {\n      if (newState) {\n        gameField.nextGeneration();\n        gameView.updateGameField(gameField.getState());\n        this.timerId = setInterval(() => {\n          if(gameField.nextGeneration()) {\n            gameView.updateGameField(gameField.getState());\n          } else {\n            clearInterval(this.timerId);\n            gameView.updateGameState({ isRunning: false });\n          }\n        }, gameView.getDuration());\n      } else {\n        gameView.updateGameField(gameField.getState());\n        clearInterval(this.timerId);\n      }\n      gameView.updateGameState({ isRunning: newState });\n    });\n    gameView.onFieldSizeChange((width: number, height: number) => {\n      gameField.setSize(width, height);\n      gameView.updateGameField(gameField.getState());\n      gameView.updateGameState({ width, height });\n    });\n  }\n}\n"],"names":["GameField","field","constructor","width","height","row","col","this","getAliveCellCount","x","y","count","nextGeneration","stateChange","length","ACount","getState","toggleCellState","setSize","newField","push","undefined","GameView","element","state","el","innerHTML","onCellClickCB","onGameStateChangeCB","newState","onFieldSizeChangeCB","gameControls","querySelector","buttonEl","document","createElement","className","addEventListener","ev","appendChild","input","i","type","valueAsNumber","inputRangeSpeed","stepDurationMs","updateGameField","gameField","tableEl","tr","td","updateGameState","isNaN","max","String","button","isRunning","disabled","onCellClick","cb","onGameStateChange","onFieldSizeChange","getDuration","getElementById","gameView","timerId","setInterval","clearInterval"],"sourceRoot":""}