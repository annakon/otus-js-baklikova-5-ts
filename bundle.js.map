{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://otus-js-baklikova-5-ts/./src/GameField.ts","webpack://otus-js-baklikova-5-ts/./src/GameView.ts","webpack://otus-js-baklikova-5-ts/./src/index.ts","webpack://otus-js-baklikova-5-ts/./src/Game.ts"],"sourcesContent":["import { Cell } from \"./types/Cell\";\n\nexport interface IGameField {\n  getState: () => Cell[][];\n  toggleCellState: (x: number, y: number) => void;\n  nextGeneration: () => boolean;\n  setSize: (width: number, height: number) => void;\n}\n\nexport class GameField implements IGameField {\n  field: Cell[][] = [];\n  constructor(width = 0, height = 1) {\n    const field = [];\n    for (let row = 0; row < height; row++) {\n      field[row] = [] as number[];\n      for (let col = 0; col < width; col++) {\n        field[row][col] = 0;\n      }\n      this.field = field;\n    }\n  }\n\n  getAliveCellCount(x: number, y: number): number {\n    let count = 0;\n    for (let row = y - 1; row <= y + 1; row++) {\n      for (let col = x - 1; col <= x + 1; col++) {\n        if (!(col === x && row === y) && this.field[row]?.[col] === 1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  nextGeneration() {\n    let stateChange = false;\n    for (let row = 0; row < this.field.length; row++) {\n      for (let col = 0; col < this.field[row].length; col++) {\n        const ACount: number = this.getAliveCellCount(col, row);\n\n        if (ACount === 3 && this.field[row][col] === 0) {\n          if (this.field[row][col] === 0) stateChange = true;\n          this.field[row][col] = 1;\n        }\n        if (ACount !== 3 && ACount !== 2 && this.field[row][col] === 1) {\n          if (this.field[row][col] === 1) stateChange = true;\n          this.field[row][col] = 0;\n        }\n      }\n    }\n    return stateChange;\n  }\n\n  getState() {\n    return this.field;\n  }\n\n  toggleCellState(x: number, y: number) {\n    if (this.field[y][x] === 1) {\n      this.field[y][x] = 0;\n    } else {\n      this.field[y][x] = 1;\n    }\n  }\n\n  setSize(width: number, height: number) {\n    const newField: Cell[][] = [];\n\n    for (let row = 0; row < height; row++) {\n      newField.push([]);\n      for (let col = 0; col < width; col++) {\n        if (\n          this.field[row] !== undefined &&\n          this.field[row][col] !== undefined\n        ) {\n          newField[row][col] = this.field[row][col];\n        } else {\n          newField[row][col] = 0;\n        }\n      }\n    }\n    this.field = newField;\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\ninterface viewState {\n  width: number;\n  height: number;\n  isRunning: boolean;\n  stepDurationMs: number;\n}\n\nexport interface IGameView {\n  updateGameField: (\n    field: Cell[][],\n    onCellClick: (x: number, y: number) => void\n  ) => void;\n  updateGameState: (state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n    stepDurationMs?: number;\n  }) => void;\n  getDuration: () => number;\n}\n\nexport class GameView implements IGameView {\n  el: HTMLElement;\n  state: viewState;\n\n  constructor(\n    element: HTMLElement,\n    state: viewState,\n    onGameStateChange: (newState: boolean) => void,\n    onFieldSizeChange: (width: number, height: number) => void\n  ) {\n    this.state = state;\n    this.el = element;\n    this.el.innerHTML =\n      \"<div class='gameField'></div><div class='gameControls'></div>\";\n\n    const gameControls = this.el.querySelector(\n      \".gameControls\"\n    ) as HTMLDivElement;\n    const buttonEl = document.createElement(\"button\");\n    buttonEl.innerHTML = \"Play\";\n    buttonEl.className = \"run-button run-button--stopped\";\n    buttonEl.addEventListener(\"click\", (ev) => {\n      onGameStateChange(buttonEl.innerHTML === \"Play\");\n    });\n    gameControls.appendChild(buttonEl);\n\n    const input: HTMLInputElement[] = [\n      document.createElement(\"input\"),\n      document.createElement(\"input\"),\n    ];\n\n    for (let i = 0; i < 2; i++) {\n      input[i].type = \"number\";\n      if (i === 0) {\n        input[i].className = \"field-size field-size--width\";\n      } else {\n        input[i].className = \"field-size field-size--height\";\n      }\n      gameControls.appendChild(input[i]);\n      input[i].addEventListener(\"change\", (ev) => {\n        onFieldSizeChange(input[0].valueAsNumber, input[1].valueAsNumber);\n      });\n    }\n\n    const inputRangeSpeed = document.createElement(\"input\");\n    inputRangeSpeed.type = \"range\";\n    inputRangeSpeed.className = \"field-range\";\n    gameControls.appendChild(inputRangeSpeed);\n    inputRangeSpeed.addEventListener(\"change\", (ev) => {\n      this.state.stepDurationMs = inputRangeSpeed.valueAsNumber;\n    });\n  }\n\n  updateGameField(\n    field: Cell[][],\n    onCellClick: (x: number, y: number) => void\n  ) {\n    const gameField = this.el.querySelector(\".gameField\") as HTMLDivElement;\n    gameField.innerHTML = \"\";\n    const tableEl = document.createElement(\"table\");\n    gameField.appendChild(tableEl);\n\n    for (let row = 0; row < field.length; row++) {\n      const tr = document.createElement(\"tr\");\n      tableEl.appendChild(tr);\n      for (let col = 0; col < field[row].length; col++) {\n        const td = document.createElement(\"td\");\n        if (field[row][col] === 1) {\n          td.className = \"cell cell--alive\";\n        } else {\n          td.className = \"cell cell--dead\";\n        }\n        td.addEventListener(\"click\", (ev) => {\n          onCellClick(col, row);\n        });\n        tr.appendChild(td);\n      }\n    }\n  }\n\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n    stepDurationMs?: number;\n  }) {\n    this.state = {\n      ...this.state,\n      ...state,\n    };\n\n    const inputW = this.el.querySelector(\n      \".field-size--width\"\n    ) as HTMLInputElement;\n    inputW.valueAsNumber = this.state.width;\n\n    const inputH = this.el.querySelector(\n      \".field-size--height\"\n    ) as HTMLInputElement;\n    inputH.valueAsNumber = this.state.height;\n\n    const inputRangeSpeed = this.el.querySelector(\n      \"input[type='range']\"\n    ) as HTMLInputElement;\n    if (\n      typeof state.stepDurationMs === \"number\" &&\n      !isNaN(state.stepDurationMs)\n    ) {\n      inputRangeSpeed.max = String(state.stepDurationMs * 2);\n      inputRangeSpeed.valueAsNumber = state.stepDurationMs;\n    }\n    const button = this.el.querySelector(\".run-button\") as HTMLButtonElement;\n    if (this.state.isRunning ?? false) {\n      button.className = \"run-button run-button--runned\";\n      button.innerHTML = \"Stop\";\n      inputRangeSpeed.disabled = true;\n    } else {\n      button.className = \"run-button run-button--stopped\";\n      button.innerHTML = \"Play\";\n      inputRangeSpeed.disabled = false;\n    }\n  }\n\n  getDuration() {\n    return this.state.stepDurationMs;\n  }\n}\n","import { Game } from \"./Game\";\nimport \"./styles.css\";\n\nconst el = document.getElementById(\"app\") as HTMLElement;\n\nnew Game(el, 5, 5, 1000);\n","import { GameField } from \"./GameField\";\nimport { GameView } from \"./GameView\";\n\nexport class Game {\n  timerId?: NodeJS.Timer;\n  constructor(\n    el: HTMLElement,\n    width: number,\n    height: number,\n    stepDurationMs = 1000\n  ) {\n    const gameField = new GameField(5, 5);\n    const gameView = new GameView(\n      el,\n      { width, height, isRunning: false, stepDurationMs },\n      (newState: boolean) => {\n        if (newState) {\n          gameField.nextGeneration();\n          gameView.updateGameField(gameField.getState(), onCellClick);\n          this.timerId = setInterval(() => {\n            if (gameField.nextGeneration()) {\n              gameView.updateGameField(gameField.getState(), onCellClick);\n            } else {\n              clearInterval(this.timerId);\n              gameView.updateGameState({ isRunning: false });\n            }\n          }, gameView.getDuration());\n        } else {\n          gameView.updateGameField(gameField.getState(), onCellClick);\n          clearInterval(this.timerId);\n        }\n        gameView.updateGameState({ isRunning: newState });\n      },\n      (width: number, height: number) => {\n        gameField.setSize(width, height);\n        gameView.updateGameField(gameField.getState(), onCellClick);\n        gameView.updateGameState({ width, height });\n      }\n    );\n\n    function onCellClick(x: number, y: number) {\n      gameField.toggleCellState(x, y);\n      gameView.updateGameField(gameField.getState(), onCellClick);\n    }\n\n    const state = gameField.getState();\n    gameField.setSize(state[0].length, state.length);\n    gameView.updateGameField(state, onCellClick);\n    gameView.updateGameState({\n      isRunning: false,\n      width: state[0].length,\n      height: state.length,\n      stepDurationMs,\n    });\n  }\n}\n"],"names":["GameField","field","constructor","width","height","row","col","this","getAliveCellCount","x","y","count","nextGeneration","stateChange","length","ACount","getState","toggleCellState","setSize","newField","push","undefined","GameView","element","state","onGameStateChange","onFieldSizeChange","el","innerHTML","gameControls","querySelector","buttonEl","document","createElement","className","addEventListener","ev","appendChild","input","i","type","valueAsNumber","inputRangeSpeed","stepDurationMs","updateGameField","onCellClick","gameField","tableEl","tr","td","updateGameState","isNaN","max","String","button","isRunning","disabled","getDuration","getElementById","gameView","newState","timerId","setInterval","clearInterval"],"sourceRoot":""}