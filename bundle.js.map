{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://otus-js-baklikova-5-ts/./src/index.ts","webpack://otus-js-baklikova-5-ts/./src/GameView.ts","webpack://otus-js-baklikova-5-ts/./src/GameField.ts","webpack://otus-js-baklikova-5-ts/./src/Game.ts"],"sourcesContent":["import { Game } from \"./Game\";\nimport { GameField } from \"./GameField\";\nimport { GameView } from \"./GameView\";\nimport \"./styles.css\";\n\nconst el = document.getElementById(\"app\") as HTMLElement;\n\nconst gameView = new GameView(el);\nconst gameField = new GameField(5, 5);\nnew Game(gameField, gameView, 1000);\n","import { Cell } from \"./types/Cell\";\nimport { IGameField } from \"./GameField\";\n\nexport interface IGameView {\n  updateGameField: (field: Cell[][]) => void;\n  updateGameState: (state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n  }) => void;\n  onCellClick: (cb: (x: number, y: number) => void) => void;\n  onGameStateChange: (cb: (newState: boolean) => void) => void;\n  onFieldSizeChange: (cb: (width: number, height: number) => void) => void;\n}\n\nexport class GameView implements IGameView {\n  el: HTMLElement;\n  onCC: (x: number, y: number) => void;\n  onGSC: (newState: boolean) => void;\n  onFSC: (width: number, height: number) => void;\n  state: { width?: number; height?: number; isRunning?: boolean } = {};\n  constructor(element: HTMLElement) {\n    this.el = element;\n    this.el.innerHTML =\n      \"<div class='gameField'></div><div class='gameControls'></div>\";\n    this.onCC = (x: number, y: number) => void {};\n    this.onGSC = (newState: boolean) => void {};\n    this.onFSC = (width: number, height: number) => void {};\n    const gameControls = this.el.querySelector(\n      \".gameControls\"\n    ) as HTMLDivElement;\n    const buttonEl = document.createElement(\"button\");\n    buttonEl.innerHTML = \"Play\";\n    buttonEl.className = \"run-button run-button--stopped\";\n    buttonEl.addEventListener(\"click\", (ev) => {\n      this.onGSC(buttonEl.innerHTML === \"Play\");\n    });\n    gameControls.appendChild(buttonEl);\n    const inputW = document.createElement(\"input\");\n    inputW.type = \"number\";\n    inputW.className = \"field-size field-size--width\";\n    gameControls.appendChild(inputW);\n    const inputH = document.createElement(\"input\");\n    inputH.type = \"number\";\n    inputH.className = \"field-size field-size--height\";\n    gameControls.appendChild(inputH);\n    inputW.addEventListener(\"change\", (ev) => {\n      this.onFSC(inputW.valueAsNumber, inputH.valueAsNumber);\n    });\n    inputH.addEventListener(\"change\", (ev) => {\n      this.onFSC(inputW.valueAsNumber, inputH.valueAsNumber);\n    });\n  }\n\n  updateGameField(field: Cell[][]) {\n    const gameField = this.el.querySelector(\".gameField\") as HTMLDivElement;\n    gameField.innerHTML = \"\";\n    const tableEl = document.createElement(\"table\");\n    gameField.appendChild(tableEl);\n    for (let row = 0; row < field.length; row++) {\n      const tr = document.createElement(\"tr\");\n      tableEl.appendChild(tr);\n      for (let col = 0; col < field[row].length; col++) {\n        const td = document.createElement(\"td\");\n        if (field[row][col] === 1) {\n          td.className = \"cell cell--alive\";\n        } else {\n          td.className = \"cell cell--dead\";\n        }\n        td.addEventListener(\"click\", (ev) => {\n          this.onCC(col, row);\n        });\n        tr.appendChild(td);\n      }\n    }\n  }\n\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n  }) {\n    this.state = {\n      ...this.state,\n      ...state,\n    };\n    if (typeof this.state.width === \"number\" && !isNaN(this.state.width)) {\n      const inputW = this.el.querySelector(\n        \"input[type='number'].field-size.field-size--width\"\n      ) as HTMLInputElement;\n      inputW.valueAsNumber = this.state.width;\n    }\n    if (typeof this.state.height === \"number\" && !isNaN(this.state.height)) {\n      const inputH = this.el.querySelector(\n        \"input[type='number'].field-size.field-size--height\"\n      ) as HTMLInputElement;\n      inputH.valueAsNumber = this.state.height;\n    }\n    const button = this.el.querySelector(\".run-button\") as HTMLButtonElement;\n    if (state.isRunning) {\n      button.className = \"run-button run-button--runned\";\n      button.innerHTML = \"Stop\";\n    } else {\n      button.className = \"run-button run-button--stopped\";\n      button.innerHTML = \"Play\";\n    }\n  }\n\n  onCellClick(cb: (x: number, y: number) => void) {\n    this.onCC = cb;\n  }\n\n  onGameStateChange(cb: (newState: boolean) => void) {\n    this.onGSC = cb;\n  }\n\n  onFieldSizeChange(cb: (width: number, height: number) => void) {\n    this.onFSC = cb;\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\nexport interface IGameField {\n  getState: () => Cell[][];\n  toggleCellState: (x: number, y: number) => void;\n  nextGeneration: () => void;\n  setSize: (width: number, height: number) => void;\n}\n\nexport class GameField implements IGameField {\n  field: Cell[][] = [];\n  constructor(width = 0, height = 1) {\n    const field = [];\n    for (let row = 0; row < height; row++) {\n      field[row] = [] as number[];\n      for (let col = 0; col < width; col++) {\n        field[row][col] = 0;\n      }\n      this.field = field;\n    }\n  }\n\n  getAliveCellCount(x: number, y: number): number {\n    let count = 0;\n    for (let row = y - 1; row <= y + 1; row++) {\n      for (let col = x - 1; col <= x + 1; col++) {\n        if (!(col === x && row === y) && this.field[row]?.[col] === 1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  nextGeneration() {\n    for (let row = 0; row < this.field.length; row++) {\n      for (let col = 0; col < this.field[row].length; col++) {\n        const ACount: number = this.getAliveCellCount(col, row);\n\n        if (ACount === 3 && this.field[row][col] === 0) {\n          this.field[row][col] = 1;\n        }\n        if (ACount !== 3 && ACount !== 2 && this.field[row][col] === 1) {\n          this.field[row][col] = 0;\n        }\n      }\n    }\n  }\n\n  getState() {\n    return this.field;\n  }\n\n  toggleCellState(x: number, y: number) {\n    if (this.field[y][x] === 1) {\n      this.field[y][x] = 0;\n    } else {\n      this.field[y][x] = 1;\n    }\n  }\n\n  setSize(width: number, height: number) {\n    const newField: Cell[][] = [];\n\n    for (let row = 0; row < height; row++) {\n      newField.push([]);\n      for (let col = 0; col < width; col++) {\n        if (\n          this.field[row] !== undefined &&\n          this.field[row][col] !== undefined\n        ) {\n          newField[row][col] = this.field[row][col];\n        } else {\n          newField[row][col] = 0;\n        }\n      }\n    }\n    this.field = newField;\n  }\n}\n","import { GameField, IGameField } from \"./GameField\";\nimport { GameView, IGameView } from \"./GameView\";\nimport { Cell } from \"./types/Cell\";\n\nexport interface IGame {}\n\nexport class Game implements IGame {\n  timerId?: NodeJS.Timer;\n  constructor(\n    gameField: IGameField,\n    gameView: IGameView,\n    stepDurationMs?: number\n  ) {\n    const state = gameField.getState();\n    gameField.setSize(state[0].length, state.length);\n    gameView.updateGameField(state);\n    gameView.updateGameState({\n      isRunning: false,\n      width: state[0].length,\n      height: state.length,\n    });\n\n    gameView.onCellClick((x: number, y: number) => {\n      gameField.toggleCellState(x, y);\n      gameView.updateGameField(gameField.getState());\n    });\n    gameView.onGameStateChange((newState: boolean) => {\n      if (newState) {\n        gameField.nextGeneration();\n        gameView.updateGameField(gameField.getState());\n        this.timerId = setInterval(() => {\n          gameField.nextGeneration();\n          gameView.updateGameField(gameField.getState());\n        }, stepDurationMs);\n      } else {\n        gameView.updateGameField(gameField.getState());\n        clearInterval(this.timerId);\n      }\n      gameView.updateGameState({ isRunning: newState });\n    });\n    gameView.onFieldSizeChange((width: number, height: number) => {\n      gameField.setSize(width, height);\n      gameView.updateGameField(gameField.getState());\n      gameView.updateGameState({ width, height });\n    });\n  }\n}\n"],"names":["el","document","getElementById","gameView","state","constructor","element","this","innerHTML","onCC","x","y","onGSC","newState","onFSC","width","height","gameControls","querySelector","buttonEl","createElement","className","addEventListener","ev","appendChild","inputW","type","inputH","valueAsNumber","updateGameField","field","gameField","tableEl","row","length","tr","col","td","updateGameState","isNaN","button","isRunning","onCellClick","cb","onGameStateChange","onFieldSizeChange","getAliveCellCount","count","nextGeneration","ACount","getState","toggleCellState","setSize","newField","push","undefined","stepDurationMs","timerId","setInterval","clearInterval"],"sourceRoot":""}